{
  "compilerOptions": {
    "target": "es5" /* Указывает версию целевого ECMAScript (для совместимости со старыми браузерами). CRA часто использует es5. */,
    "lib": [
      /* Список файлов библиотек для включения в компиляцию. */ "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true /* Разрешает компиляцию файлов JavaScript. */,
    "skipLibCheck": true /* Пропускает проверку типов во всех файлах объявлений (.d.ts). Полезно для ускорения компиляции и обхода проблем со сторонними библиотеками. */,
    "esModuleInterop": true /* Позволяет использовать синтаксис импорта CommonJS и ES Modules. */,
    "allowSyntheticDefaultImports": true /* Разрешает импорты по умолчанию из модулей, у которых нет экспорта по умолчанию. */,
    "strict": true /* Включает все строгие режимы проверки типов. Рекомендуется для лучшей поддержки типов. */,
    "forceConsistentCasingInFileNames": true /* Принуждает к согласованному использованию регистра в именах файлов. */,
    "noEmit": true /* Запрещает компилятору генерировать выходные файлы (JS). Это полезно, когда сборщик (Webpack через Babel) сам обрабатывает генерацию JS. */,
    "incremental": true /* Включает инкрементальную компиляцию для более быстрого перестроения проекта. */,
    "module": "esnext" /* Указывает систему модулей для вывода. 'esnext' для современного синтаксиса ES Modules. */,
    "moduleResolution": "node" /* Указывает стратегию разрешения модулей. 'node' для имитации механизма разрешения Node.js. */,
    "resolveJsonModule": true /* Позволяет импортировать файлы .json. */,
    "isolatedModules": true /* Гарантирует, что каждый файл может быть безопасно транспилирован независимо. */,
    "jsx": "react-jsx" /* Указывает, как JSX преобразуется в JavaScript. 'react-jsx' для новой трансформации JSX. */,
    "outDir": "./dist" /* Каталог для выходных файлов. (CRA обычно не использует это напрямую, так как Webpack обрабатывает вывод) */,
    "rootDir": "./src" /* Указывает корневой каталог исходных файлов. */,
    "noImplicitAny": true /* Выдает ошибку, если у переменных неявно есть тип 'any'. */,
    "noImplicitThis": true /* Выдает ошибку, если 'this' используется без явного типа. */,
    "noUnusedLocals": true /* Выдает ошибку для неиспользуемых локальных переменных. */,
    "noUnusedParameters": true /* Выдает ошибку для неиспользуемых параметров. */,
    "plugins": [
      {
        "name": "typescript-plugin-css-modules" /* Плагин для поддержки CSS Modules, если вы их используете. */
      }
    ]
  },
  "include": [
    /* Массив паттернов glob, определяющих файлы для включения в компиляцию. */ "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.d.ts",
    "src/utils/useModalPopup.tsx"
, "src/components/ConvectorValue/src/AppConvector.jsx"  ],
  "exclude": [
    /* Массив паттернов glob, определяющих файлы для исключения из компиляции. */ "node_modules",
    "build",
    "dist"
  ]
}
